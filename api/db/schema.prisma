// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model User {
  id     Int     @id @default(autoincrement())
  active Boolean @default(false) //for gdpr considerations: if `false` we do not have consent for storing data/consent was revoked

  esnEmail      String?   @unique
  personalEmail String    @unique
  gdprConsent   DateTime?
}

model Person {
  id     Int     @id @default(autoincrement())
  active Boolean @default(false) //for gdpr considerations: if `false` we do not have consent for storing data/consent was revoked

  registrations Registration[]
  payments      Payment[]
  esncard       ESNCard[]

  firstname String
  lastname  String
  email     String
  phone     String

  notes String?
}

model Registration {
  id Int @id @default(autoincrement())

  person   Person @relation(fields: [personId], references: [id], onDelete: Restrict)
  personId Int    @unique

  payments Payment[]
}

//payment records must be maintained for 5 years since creation
model Payment {
  id   Int      @id @default(autoincrement())
  date DateTime @default(dbgenerated("NOW()"))

  person         Person       @relation(fields: [personId], references: [id], onDelete: Restrict)
  personId       Int          @unique
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Restrict)
  registrationId Int          @unique

  amount Int
  type   PaymentMethod
}

//https://esncard.org/services/1.0/card.json?code=
model ESNCard {
  cardnumber String   @id
  expiry     DateTime
  section    String

  person   Person @relation(fields: [personId], references: [id], onDelete: Restrict)
  personId Int    @unique
}

enum PaymentMethod {
  CASH
  CARD
}
